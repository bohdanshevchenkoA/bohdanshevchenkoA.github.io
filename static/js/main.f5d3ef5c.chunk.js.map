{"version":3,"sources":["components/paginationToolbar.js","constants.js","components/Table.js","layout/accordion.js","components/TableConfigPanel.js","components/searchPanel.js","components/alert.js","App.js","reportWebVitals.js","index.js"],"names":["PaginationToolbar","currentPage","numberOfPages","onPageChange","recordNumber","useState","inputPageNum","setInputPageNum","validatePageChange","action","actionName","payload","useEffect","className","onClick","value","onKeyPress","e","code","target","trim","onChange","onBlur","COLUMN_TYPE","Table","structure","data","pageSize","onChangeSorting","sort","setSort","cellHeight","setCellHeight","cells","document","getElementsByClassName","maxHeight","item","style","height","offsetHeight","rows","column","rowData","map","columnData","index","dataContainer","type","href","src","alt","header","length","emptyRowNumber","i","push","id","aria-current","isSortable","direction","sortingBy","setSortHandler","AccordionLayout","children","expand","setExpand","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","TableConfigPanel","columns","onEditColumn","onPageSizeChange","onSetAlert","inputColumnCount","setInputColumnCount","inputPageSize","setInputPageSize","dataInstances","setDataInstances","columnNumChangeHandler","columnCount","newColumn","JSON","parse","stringify","name","toUpperCase","isSearchable","filter","pageSizeChangeHandler","size","editColumnHandler","columnId","newColumns","htmlFor","scope","contentEditable","suppressContentEditableWarning","onInput","innerText","replace","newColumnPosition","currentIndexes","columnPositionChangeHandler","instance","readOnly","checked","SearchPanel","onSearchData","filterBy","setFilterBy","filteredColumn","aria-label","placeholder","aria-describedby","filteringValue","filteredData","includes","filterHandler","Alert","role","App","loading","setLoading","show","message","alert","setAlert","setColumns","setData","setFilteredData","setPageSize","setCurrentPage","setNumberOfPage","setRecordNumber","timer","setTimeout","clearTimeout","a","fetch","films","json","response","errorMessage","responseColumns","Object","entries","cache_response","items","dataType","isNaN","parser","createElement","host","window","location","fetchCards","currentData","useMemo","lastRowIndex","firstRowIndex","b","comparison","Number","Math","ceil","slice","newPageSize","page","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f5d3ef5c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nexport function PaginationToolbar({ currentPage, numberOfPages, onPageChange, recordNumber }) {\r\n    const [inputPageNum, setInputPageNum] = useState(currentPage);\r\n\r\n    useEffect(() => {\r\n        setInputPageNum(currentPage);\r\n    }, [currentPage])\r\n\r\n    function validatePageChange(action) {\r\n        switch (action.actionName) {\r\n            case 'toPrevPage':\r\n                if (action.payload !== 0) {\r\n                    setInputPageNum(action.payload);\r\n                    onPageChange(action.payload)\r\n                }\r\n                break;\r\n            case 'toNextPage':\r\n                if (action.payload <= numberOfPages) {\r\n                    setInputPageNum(action.payload);\r\n                    onPageChange(action.payload)\r\n                }\r\n                break;\r\n            case 'toInsertedPage':\r\n                if (action.payload > 0 && action.payload <= numberOfPages) {\r\n                    setInputPageNum(action.payload);\r\n                    onPageChange(action.payload)\r\n                } else {\r\n                    setInputPageNum(currentPage);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='input-group mb-3 pagination'>\r\n            <button\r\n                className='btn btn-outline-secondary btn-first-page'\r\n                onClick={() => onPageChange(1)}\r\n            >\r\n                <i className='bi bi-chevron-double-left' />\r\n            </button>\r\n            <button\r\n                className='btn btn-outline-secondary'\r\n                onClick={() => validatePageChange({ actionName: 'toPrevPage', payload: currentPage - 1 })}\r\n            >\r\n                <i className='bi bi-chevron-left' />\r\n            </button>\r\n            <span className='input-group-text pagination-text'>Page</span>\r\n            <input\r\n                className='form-control input-page'\r\n                value={inputPageNum}\r\n                onKeyPress={e => e.code === 'Enter'\r\n                    ? validatePageChange({ actionName: 'toInsertedPage', payload: e.target.value.trim() })\r\n                    : ''}\r\n                onChange={e => setInputPageNum(e.target.value)}\r\n                onBlur={e => validatePageChange({ actionName: 'toInsertedPage', payload: e.target.value.trim() })}\r\n            />\r\n            <span className='input-group-text pagination-text'>of &nbsp;\r\n            {numberOfPages}\r\n            </span>\r\n            <button\r\n                className='btn btn-outline-secondary btn-next-page'\r\n                onClick={() => validatePageChange({ actionName: 'toNextPage', payload: currentPage + 1 })}\r\n            >\r\n                <i className='bi bi-chevron-right' />\r\n            </button>\r\n            <button\r\n                className='btn btn-outline-secondary btn-last-page'\r\n                onClick={e => onPageChange(numberOfPages)}>\r\n                <i className='bi bi-chevron-double-right' />\r\n            </button>\r\n            <div className='input-group-text record-number'>{'Number of records: ' + recordNumber}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPaginationToolbar.propTypes = {\r\n    currentPage: PropTypes.number.isRequired,\r\n    numberOfPages: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired,\r\n    recordNumber: PropTypes.number.isRequired\r\n}","export const COLUMN_TYPE = {TEXT: 'Text', NUMBER: 'Number', IMAGE: 'Image', LINK: 'Link'}","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { COLUMN_TYPE } from '../constants';\r\n\r\nexport function Table({ structure, data, pageSize, onChangeSorting }) {\r\n    const [sort, setSort] = useState();\r\n    const [cellHeight, setCellHeight] = useState();\r\n\r\n    //Calculate ul-table cell height\r\n    useEffect(() => {\r\n        const cells = document.getElementsByClassName('table-cell');\r\n        let maxHeight = 0;\r\n\r\n        for (let item of cells) {\r\n            item.style.height = 'auto;'\r\n            if (item.offsetHeight > maxHeight) {\r\n                maxHeight = item.offsetHeight;\r\n            }\r\n        }\r\n        setCellHeight(maxHeight);\r\n    }, [structure]);\r\n\r\n    const rows = (column) => {\r\n\r\n        //Render rows with data\r\n        let rowData = data.map((columnData, index) => {\r\n            let dataContainer;\r\n\r\n            switch (column.type) {\r\n                case COLUMN_TYPE.NUMBER:\r\n                case COLUMN_TYPE.TEXT: {\r\n                    dataContainer = columnData[column.data];\r\n                    break;\r\n                }\r\n                case COLUMN_TYPE.LINK: {\r\n                    dataContainer = <a href={columnData[column.data]}>Link</a>\r\n                    break;\r\n                }\r\n                case COLUMN_TYPE.IMAGE: {\r\n                    dataContainer = <img src={columnData[column.data]} alt={columnData[column.header] + ' image'} />\r\n                    break;\r\n                }\r\n            }\r\n            return (\r\n                <li\r\n                    key={index}\r\n                    className='table-cell list-group-item'\r\n                    style={{ height: cellHeight + 'px' }}\r\n                >\r\n                    {dataContainer}\r\n                </li>\r\n            )\r\n        });\r\n\r\n        //If the data is less than the number of records per page - create empty \r\n        if (rowData.length < pageSize) {\r\n            const emptyRowNumber = pageSize - rowData.length;\r\n\r\n            for (let i = 0; i < emptyRowNumber; i++) {\r\n                rowData.push(<li key={rowData.length + i} className='table-cell list-group-item' />)\r\n            }\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    function setSortHandler(column) {\r\n        if (column.isSortable) {\r\n            if (sort && sort.direction === 'ASC' && sort.sortingBy === column.header) {\r\n                setSort({ sortingBy: column.header, direction: 'DESC' });\r\n                onChangeSorting({ sortingBy: column.data, direction: 'DESC', type: column.type });\r\n            } else {\r\n                setSort({ sortingBy: column.header, direction: 'ASC' });\r\n                onChangeSorting({ sortingBy: column.data, direction: 'ASC', type: column.type });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n            <nav className='ul-table'>\r\n                {\r\n                    structure.map(column => (\r\n                        <ul\r\n                            key={column.id}\r\n                            className='table-column list-group'\r\n                            id={column.id}\r\n                        >\r\n                            <li\r\n                            key={column.id + '-table-header'}\r\n                            className='table-header list-group-item active'\r\n                            aria-current='true'\r\n                            onClick={() => setSortHandler(column)}\r\n                        >\r\n                            {column.header}\r\n                            {sort && sort.sortingBy === column.header && (\r\n                                <i className={sort.direction === 'ASC' ? 'bi bi-arrow-up' : 'bi bi-arrow-down'} />\r\n                            )}\r\n                        </li>\r\n                            {\r\n                                rows(column)\r\n                            }\r\n                        </ul>\r\n                    ))\r\n                }\r\n            </nav>\r\n    )\r\n}\r\n\r\nTable.propTypes = {\r\n    structure: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    onChangeSorting: PropTypes.func.isRequired\r\n}","import React, { useState } from 'react';\r\n\r\nexport function AccordionLayout({ children }) {\r\n    const [expand, setExpand] = useState(true);\r\n\r\n    return (\r\n        <div className='accordion accordion-flush' id='accordionFlushExample'>\r\n            <div className='accordion-item'>\r\n                <h2 className='accordion-header' id='flush-headingOne'>\r\n                    <div\r\n                        className='accordion-button-custom'\r\n                        type='button'\r\n                        data-bs-toggle='collapse'\r\n                        data-bs-target='#flush-collapseOne'\r\n                        aria-expanded='true'\r\n                        aria-controls='flush-collapseOne'\r\n                        onClick={() => expand ? setExpand(false) : setExpand(true)}\r\n                    >\r\n                        Table Creator Panel\r\n                    </div>\r\n                </h2>\r\n                <div\r\n                    id='flush-collapseOne'\r\n                    className={expand ? 'accordion-collapse show' : 'accordion-collapse collapse'}\r\n                    aria-labelledby='flush-headingOne'\r\n                    data-bs-parent='#accordionFlushExample'\r\n                >\r\n                    <div className='accordion-body'>{children}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { AccordionLayout } from '../layout/accordion'\r\nimport { COLUMN_TYPE } from '../constants';\r\n\r\nexport function TableConfigPanel({ columns, onEditColumn, pageSize, onPageSizeChange, onSetAlert }) {\r\n    const [inputColumnCount, setInputColumnCount] = useState(columns.length);\r\n    const [inputPageSize, setInputPageSize] = useState(pageSize);\r\n    const [dataInstances, setDataInstances] = useState();\r\n\r\n    //When mounting getting data instances to change the data in the column\r\n    useEffect(() => {\r\n        const dataInstances = columns.map(column => ({ data: column.data, type: column.type }));\r\n        setDataInstances(dataInstances);\r\n    }, [])\r\n\r\n    function columnNumChangeHandler(columnCount) {\r\n        if (columnCount > 0) {\r\n            let newColumn = JSON.parse(JSON.stringify(columns));\r\n\r\n            if (columns.length < columnCount) {\r\n                for (let i = columns.length; i < columnCount; i++) {\r\n                    newColumn.push({\r\n                        id: i + 1 + '-tableColumn',\r\n                        data: dataInstances[0].data,\r\n                        header: dataInstances[0].name.toUpperCase(),\r\n                        type: COLUMN_TYPE.TEXT,\r\n                        isSortable: true,\r\n                        isSearchable: true\r\n                    });\r\n                }\r\n\r\n            } else if (columns.length > columnCount) {\r\n                newColumn = newColumn.filter((column, index) => (\r\n                    index < columnCount\r\n                ));\r\n            }\r\n            debugger;\r\n            onEditColumn(newColumn);\r\n\r\n        } else {\r\n            onSetAlert('The number of columns must be at least one');\r\n            setInputColumnCount(columns.length);\r\n        }\r\n    }\r\n\r\n    function pageSizeChangeHandler(size) {\r\n        if (size >= 10 && size <= 50) {\r\n            onPageSizeChange(+size);\r\n        } else {\r\n            onSetAlert('Page size should be from 10 to 50');\r\n            setInputPageSize(pageSize);\r\n        }\r\n    }\r\n\r\n    function columnPositionChangeHandler(newColumnPosition, columnId) {\r\n\r\n        if (newColumnPosition <= columns.length) {\r\n            let newColumns = JSON.parse(JSON.stringify(columns));\r\n\r\n            let currentIndexes = columns.map((column, index) => {\r\n\r\n                return column.id === columnId || index === newColumnPosition - 1 ? index : null;\r\n            }).filter((index) => index !== null);\r\n\r\n            if (currentIndexes.length !== 1) {\r\n                [newColumns[currentIndexes[0]], newColumns[currentIndexes[1]]] = [newColumns[currentIndexes[1]], newColumns[currentIndexes[0]]];\r\n\r\n                onEditColumn(newColumns);\r\n            }\r\n\r\n        } else {\r\n            onSetAlert('The column position should not exceed the number of columns');\r\n        }\r\n    }\r\n\r\n    function editColumnHandler(action, columnId) {\r\n        let newColumns = columns.map((column) => {\r\n            if (column.id === columnId) {\r\n                if (typeof (action.payload) === 'object') {\r\n                    for (let i = 0; i <= action.payload.length; i++) {\r\n                        column[action.name[i]] = action.payload[i];\r\n                    }\r\n                } else {\r\n                    column[action.name] = action.payload\r\n                }\r\n            }\r\n            return column;\r\n        });\r\n\r\n        onEditColumn(newColumns);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AccordionLayout>\r\n                <div className='config-panel'>\r\n                    <div className='form-floating mb-3'>\r\n                        <input\r\n                            type='number'\r\n                            className='form-control'\r\n                            value={inputColumnCount}\r\n                            onChange={e => setInputColumnCount(+e.target.value)}\r\n                            onBlur={e => columnNumChangeHandler(+e.target.value)}\r\n                            onKeyPress={e => e.code === 'Enter' ? columnNumChangeHandler(+e.target.value) : ''}\r\n                        />\r\n                        <label htmlFor='floatingInput'>Number of column</label>\r\n                    </div>\r\n                    <div className='form-floating'>\r\n                        <input\r\n                            type='number'\r\n                            className='form-control'\r\n                            value={inputPageSize}\r\n                            onChange={e => setInputPageSize(+e.target.value)}\r\n                            onBlur={e => pageSizeChangeHandler(+e.target.value)}\r\n                            onKeyPress={e => e.code === 'Enter' ? pageSizeChangeHandler(+e.target.value) : ''}\r\n                        />\r\n                        <label htmlFor='floatingInput'>Page size</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className='h-100 table table-bordered mx-auto w-auto'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope='col'>Column Position</th>\r\n                            <th scope='col'>Column Data</th>\r\n                            <th scope='col'>Column Name</th>\r\n                            <th scope='col'>Is sortable?</th>\r\n                            <th scope='col'>Is searchable?</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {columns.map((column, index) => {\r\n                            return (\r\n                                <tr key={column.id}>\r\n                                    <td className='input-columnPosition'\r\n                                        contentEditable\r\n                                        suppressContentEditableWarning\r\n                                        onInput={e => (\r\n                                            e.target.innerText > columns.length\r\n                                                ? onSetAlert('The column position should not exceed the number of columns')\r\n                                                : ''\r\n                                        )}\r\n                                        onBlur={e => {\r\n                                            e.target.innerText > columns.length\r\n                                                ? e.target.innerText = index + 1\r\n                                                : e.target.innerText = e.target.innerText.replace(/[^\\d]/g, '');\r\n                                            columnPositionChangeHandler(+e.target.innerText, column.id);\r\n                                        }}\r\n                                    >\r\n                                        {index + 1}\r\n                                    </td>\r\n                                    <td className='input-columnData'\r\n                                        onChange={e => {\r\n                                            const data = dataInstances.filter(instance => instance.data === e.target.value);\r\n                                            editColumnHandler({ name: ['data', 'type'], payload: [data[0].data, data[0].type] }, column.id)\r\n                                        }}\r\n                                    >\r\n                                        <select value={column.data} readOnly>\r\n                                            {dataInstances && dataInstances.map((instance, index) => {\r\n                                                return <option key={instance.data + index}>{instance.data}</option>\r\n                                            })}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td className='input-columnName'\r\n                                        contentEditable\r\n                                        suppressContentEditableWarning\r\n                                        onBlur={e => {\r\n                                            e.target.innerText = e.target.innerText.trim();\r\n                                            editColumnHandler({ name: 'header', payload: e.target.innerText }, column.id);\r\n                                        }}\r\n                                        onKeyPress={e => {\r\n                                            if (e.code === 'Enter') {\r\n                                                e.target.innerText = e.target.innerText.trim();\r\n                                                editColumnHandler({ name: 'header', payload: e.target.innerText }, column.id);\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        {column.header}\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            className='checkbox-isSortable'\r\n                                            type='checkbox'\r\n                                            checked={column.isSortable}\r\n                                            onChange={e => editColumnHandler({ name: 'isSortable', payload: e.target.checked }, column.id)}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            className='checkbox-Searchable'\r\n                                            checked={column.isSearchable}\r\n                                            type='checkbox'\r\n                                            onChange={e => editColumnHandler({ name: 'isSearchable', payload: e.target.checked }, column.id)}\r\n\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </AccordionLayout>\r\n        </>\r\n    )\r\n}\r\n\r\nTableConfigPanel.propTypes = {\r\n    columns: PropTypes.array.isRequired,\r\n    onEditColumn: PropTypes.func.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    onPageSizeChange: PropTypes.func.isRequired,\r\n    onSetAlert: PropTypes.func.isRequired\r\n}","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport function SearchPanel({ columns, data, onSearchData, onSetAlert }) {\r\n    const [filterBy, setFilterBy] = useState();\r\n\r\n    useEffect(() => {\r\n        const filteredColumn = columns.map(column => column.isSearchable ? column.data : null);\r\n        setFilterBy(filteredColumn[0]);\r\n    }, [columns]);\r\n\r\n    function filterHandler(filteringValue) {\r\n        if (filterBy) {\r\n            const filteredData = data.filter(rowData => \r\n                rowData[filterBy] && rowData[filterBy].toUpperCase().includes(filteringValue.toUpperCase()) ? rowData : ''\r\n            );\r\n\r\n            onSearchData(filteredData);\r\n        } \r\n        else {\r\n            onSetAlert('First select the column you want to search by');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='input-group input-group-sm mb-3 search-panel'>\r\n            <span className='input-group-text' id='inputGroup-sizing-sm'>Search By</span>\r\n            <select\r\n                className='form-select form-select-sm'\r\n                aria-label='.form-select-sm'\r\n                onChange={e => setFilterBy(e.target.value)}\r\n            >\r\n                {columns.map((column, index) => \r\n                    column.isSearchable && <option key={index} value={column.data}>{column.header}</option>\r\n                )}\r\n            </select>\r\n            <input\r\n                type='text'\r\n                className='form-control input-search'\r\n                placeholder='Search'\r\n                aria-label='Search'\r\n                aria-describedby='basic-addon1'\r\n                onChange={e => filterHandler(e.target.value)}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nSearchPanel.propTypes = {\r\n    columns: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    onSearchData: PropTypes.func.isRequired,\r\n    onSetAlert: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport function Alert({ children }) {\r\n\r\n    return (\r\n        <div className='alert alert-warning' role='alert'>\r\n            {children}\r\n        </div>\r\n\r\n    )\r\n}","import React, { useState, useMemo, useEffect } from 'react';\nimport { PaginationToolbar } from './components/paginationToolbar';\nimport { Table } from './components/Table';\nimport { TableConfigPanel } from './components/TableConfigPanel';\nimport { SearchPanel } from './components/searchPanel';\nimport { Alert } from './components/alert';\nimport { COLUMN_TYPE } from './constants';\nimport cache_response from './IMDB_responce.json';\nimport './styles/style.css';\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [alert, setAlert] = useState({ show: false, message: '' });\n  const [columns, setColumns] = useState();\n  const [data, setData] = useState();\n  const [sort, setSort] = useState();\n  const [filteredData, setFilteredData] = useState();\n  const [pageSize, setPageSize] = useState(50);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [numberOfPages, setNumberOfPage] = useState();\n  const [recordNumber, setRecordNumber] = useState();\n\n  //When the alert state changes set a timer to hide it\n  useEffect(() => {\n    const timer = setTimeout(() => setAlert(false), 5000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      const films = await fetch('https://imdb-api.com/en/API/Top250Movies/k_9qushv39');\n      const response = await films.json();\n      let responseColumns;\n      let columns = [];\n      \n      if (response.errorMessage.includes('Maximum usage') || response.errorMessage.includes('Invalid API')) {\n        setAlert({ show: true, message: response.errorMessage + ' Cached data will be used.' });\n        responseColumns = Object.entries(cache_response.items[0]);\n        setData(cache_response.items);\n      }\n      else {\n        responseColumns = Object.entries(response.items[0]);\n        setData(response.items);\n      }\n\n      for (let i = 1; i < responseColumns.length; i++) {\n        let dataType;\n        if (isNaN(responseColumns[i][1])) {\n          let parser = document.createElement('a');\n\n          parser.href = responseColumns[i][1];\n          dataType = parser.host && parser.host !== window.location.host ? COLUMN_TYPE.IMAGE : COLUMN_TYPE.TEXT;\n        } else {\n          dataType = COLUMN_TYPE.NUMBER;\n        }\n\n        columns.push({\n          id: i + '-tableColumn',\n          data: responseColumns[i][0],\n          header: responseColumns[i][0].toUpperCase(),\n          type: dataType,\n          isSortable: true,\n          isSearchable: true\n        });\n      }\n\n      setColumns(columns);\n      setLoading(false);\n    }\n\n    fetchCards();\n  }, []);\n\n  const currentData = useMemo(() => {\n    const lastRowIndex = currentPage * pageSize;\n    const firstRowIndex = lastRowIndex - pageSize;\n    const currentData = filteredData ? filteredData : data;\n\n    if (sort && sort.sortingBy) {\n\n      currentData.sort((a, b) => {\n        let comparison = 0;\n\n        switch (sort.type) {\n          case COLUMN_TYPE.IMAGE:\n          case COLUMN_TYPE.LINK:\n          case COLUMN_TYPE.TEXT: {\n            if (sort.direction === 'ASC') {\n              comparison = a[sort.sortingBy].toUpperCase() > b[sort.sortingBy].toUpperCase() ? 1 : -1;\n            } else {\n              comparison = a[sort.sortingBy].toUpperCase() > b[sort.sortingBy].toUpperCase() ? -1 : 1;\n            }\n            break;\n          }\n          case COLUMN_TYPE.NUMBER: {\n            if (sort.direction === 'ASC') {\n              comparison = +a[sort.sortingBy] > +b[sort.sortingBy] ? 1 : -1;\n            } else {\n              comparison = +a[sort.sortingBy] > +b[sort.sortingBy] ? -1 : 1;\n            }\n            break;\n          }\n        }\n\n        return comparison;\n      });\n    }\n\n    setRecordNumber(currentData ? Number(currentData.length) : 0);\n    setNumberOfPage(Math.ceil(currentData && currentData.length / pageSize));\n\n    return (\n      currentData && currentData.slice(firstRowIndex, lastRowIndex)\n    )\n  }, [currentPage, pageSize, sort, filteredData, data]);\n\n  if (!loading) {\n    return (\n      <div className='App'>\n        <TableConfigPanel\n          columns={columns}\n          onEditColumn={newColumns => setColumns(newColumns)}\n          pageSize={pageSize}\n          onPageSizeChange={newPageSize => { setPageSize(newPageSize); setCurrentPage(1); }}\n          onSetAlert={message => setAlert({ show: true, message: message })}\n        />\n        <SearchPanel\n          columns={columns}\n          data={data}\n          onSearchData={filteredData => { setFilteredData(filteredData); setCurrentPage(1); }}\n          onSetAlert={message => setAlert({ show: true, message: message })}\n        />\n        <Table\n          structure={columns}\n          pageSize={pageSize}\n          data={currentData}\n          onChangeSorting={sort => setSort(sort)}\n        />\n        <PaginationToolbar\n          numberOfPages={numberOfPages}\n          currentPage={currentPage}\n          onPageChange={page => setCurrentPage(page)}\n          recordNumber={recordNumber}\n        />\n        { alert.show && <Alert>{alert.message}</Alert>}\n      </div>\n    );\n  } else {\n    return (\n      <div className='spinner-grow text-primary' role='status'>\n        <span className='visually-hidden'>Loading...</span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}